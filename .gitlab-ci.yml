# RISC OS CI build through JFPatch as a service.
#
# To reuse this configuration with your own repository:
#
#   - Create a .robuild.yaml to describe what should be built on RISC OS.
#       - `jobs.build.script` should be a list of commands to run on RISC OS
#       - `jobs.build.artifacts.path` should be the directory to zip.
#   - Create a VersionNum file if you wish to use the automated versioning
#     in the same style as the RISC OS sources. [optional]
#   - Update the 3rd step ('give the archive a versioned name') to give a
#     suitable name for the archive.
#   - Update the artifacts path to include the same names.
#


# JFPatch only builds the module; it doesn't do a full release at present (the Makefile would need
# updating for that)
jfpatch:
    stage: build
    script:
      - |
        set -o pipefail
        mkdir /tmp/robuild
        # Zip up the source to send to robuild
        zip -9r /tmp/source-archive.zip * .robuild.yaml
        # Send the archive file to JFPatch as a service
        curl -q -F 'source=@/tmp/source-archive.zip' -o /tmp/robuild/result.json http://jfpatch.riscos.online/build/json
        # Extract any sysetm messages and output
        jq -r '.messages[]' /tmp/robuild/result.json > /tmp/robuild/messages.txt
        jq -r 'reduce .output[] as $i ("";. + $i)' /tmp/robuild/result.json > /tmp/robuild/output.txt
        # Extract return code
        rc=$(jq -r .rc /tmp/robuild/result.json | tee /tmp/robuild/rc.json)
        # Marker files for the state
        if [ "$rc" != "0" ] ; then touch /tmp/robuild/failed ; else touch /tmp/robuild/ok ; fi
        # Extract the built binary if we had any
        if [ "$rc" = "0" ] ; then
            jq -r .data /tmp/robuild/result.json | base64 --decode - > /tmp/robuild/built
        fi
        # Outputs:
        #   /tmp/robuild/result.json    - JSON output from the service.
        #   /tmp/robuild/{ok,failed}    - status of the build (whether RC was 0).
        #   /tmp/robuild/built          - the output result from the build.
        #   /tmp/robuild/rc             - the value of the return code (decimal string)
        #   /tmp/robuild/messages.txt   - system messages
        #   /tmp/robuild/output.txt     - output from the build

      - |
        echo "System messages:"
        sed 's/^/  /' < /tmp/robuild/messages.txt
        echo
        echo "Build output:"
        sed 's/^/  /' < /tmp/robuild/output.txt
        echo
        if [ ! -f /tmp/robuild/ok ] ; then
            echo "FAILED! Aborting"
            exit 1
        fi

      - |
        version=$(sed '/MajorVersion / ! d ; s/.*MajorVersion *"\(.*\)"/\1/' VersionNum)
        echo This is version: $version
        if [ -f /tmp/robuild/built ] ; then
            cp /tmp/robuild/built "DDEUtils-$version.zip"
        else
            echo "No archive was built?"
            exit 1
        fi

    artifacts:
        when: always
        paths:
            - DDEUtils-*.zip

    tags:
      - linux

stages:
    - build
